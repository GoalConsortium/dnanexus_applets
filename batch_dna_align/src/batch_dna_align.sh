#!/bin/bash
# align_markdups
# Generated by dx-app-wizard.

main() {
    
    dx download "$design" -o design.txt
    dx download "$humanref" -o humanref
    
    mkdir humanref
    docker run -v ${PWD}:/data docker.io/goalconsortium/dna_alignment:1.0.7 tar -I pigz -xvf humanref.tar.gz --strip-components=1 -C humanref
    
    declare -A bams
    declare -a bais
    ln=0
    while read i; do
	line=($i)
	colnames=($(head -n 1 $design))
	opts=''
	declare -A fqfiles
	while [ "${#colnames[@]}" -gt 0 ] ; do
	    eval ${colnames[0]}="${line[0]}"
	    if [[ ${colnames[0]} =~ 'FqR' ]]
	    then
		fqfiles[${colnames[0]}]=${line[0]}
	    fi
	    colnames=( "${colnames[@]:1}" )
	    line=( "${line[@]:1}" )
	done
	if [[ $SampleID != "SampleID" ]]
	   ln=$((ln+1))	   
	   dx download "${fqfiles[FqR1]}" -o $SampleID.R1.fastq.gz
	   dx download "${fqfiles[FqR2]}" -o $SampleID.R2.fastq.gz
	   
	   docker run -v ${PWD}:/data docker.io/goalconsortium/dna_alignment:1.0.7 bash /seqprg/process_scripts/alignment/dnaseqalign.sh -r humanref -p ${SampleID} -x ${Sampleid}.R1.fastq.gz -y ${SampleID}.R2.fastq.gz
	   
	   bams[${ln}]=$(dx upload ${sampleid}.bam --brief)
	   bais[${ln}]=$(dx upload ${sampleid}.bam.bai --brief)
	fi
    done <$design
    
    for i in "${!bams[@]}"; do
        dx-jobutil-add-output bams "${bams[$i]}" --class=array:file
    done
    for i in "${!bais[@]}"; do
        dx-jobutil-add-output bais "${bais[$i]}" --class=array:file
    done
    
}
