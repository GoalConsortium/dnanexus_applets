#!/bin/bash
# align_markdups 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    dx download "$fq1" -o seq.R1.fastq.gz
    dx download "$fq2" -o seq.R2.fastq.gz
    dx download "$reference" -o reference.tar.gz

    tar xvfz reference.tar.gz

    if [[ $mdup == 'fgbio_umi' ]]
    then
    docker run -v ${PWD}:/data docker.io/goalconsortium/alignment:v1 bash /usr/local/bin/dnaseqalign.sh -r reference -a bwa -p ${pair_id} -x seq.R1.fastq.gz -y seq.R2.fastq.gz -u
    else
    docker run -v ${PWD}:/data docker.io/goalconsortium/alignment:v1 bash /usr/local/bin/dnaseqalign.sh -r reference -a bwa -p ${pair_id} -x seq.R1.fastq.gz -y seq.R2.fastq.gz
    fi
    docker run -v ${PWD}:/data docker.io/goalconsortium/alignment:v1 bash /usr/local/bin/bam2tdf.sh -r reference -b ${pair_id}.bam -p ${pair_id}.raw
    docker run -v ${PWD}:/data docker.io/goalconsortium/alignment:v1 bash /usr/local/bin/markdups.sh -a $mdup -b ${pair_id}.bam -p ${pair_id}
    mv ${pair_id}.dedup.bam ${pair_id}.consensus.bam
    mv ${pair_id}.dedup.bam.bai ${pair_id}.consensus.bam.bai

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    rawbam=$(dx upload ${pair_id}.bam --brief)
    conbam=$(dx upload ${pair_id}.consensus.bam --brief)
    rawbai=$(dx upload ${pair_id}.bam.bai --brief)
    conbai=$(dx upload ${pair_id}.consensus.bam.bai --brief)
    rawtdf=$(dx upload ${pair_id}.raw.tdf --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output rawbam "$rawbam" --class=file
    dx-jobutil-add-output conbam "$conbam" --class=file
    dx-jobutil-add-output rawbai "$rawbai" --class=file
    dx-jobutil-add-output conbai "$conbai" --class=file
    dx-jobutil-add-output rawtdf "$rawtdf" --class=file
}
